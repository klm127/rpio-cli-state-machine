"""
Manages game logic.

Contains self.Map, a `Map.Map` generated by `Map.Levels.Levels`

Contains self.player, retrieved from self.Map

Contains self.view, a `Map.Player.Viewport` retrieved from self.player

Contains self.display, inherited from `GameStates.Game`

Adds `Commands` for player keypresses to its `src.StateMachine.Commands.Commands` instance, binding them to effects

When `MapState` is updated by the `GameProgram`,
 it tells self.Map to process any moves requested by objects on the map
 blanks the display,
 and loads the player's view range to the `Display` object

"""

from src.Game.GameStates import Game
from src.Game.Map import Map
from src.StateMachine.Commands import Command
from src.Game.Map.Levels import Levels
from src.Game.WinState import Win
from src.Game.LoseState import Lose


class MapState(Game):
    """
    Initializes a new MapState

    Passes player's view to display, handles key presses, tells Map to check moves

    :param program: program operating this state
    :type program: class src.Game.GameProgram.GameProgram
    :param display: display to show player's view on
    :type display: class src.Game.Display
    """
    def __init__(self, program, display):
        Game.__init__(self, program, display)
        self.level = 0
        self.Map = Levels.levs[self.level].get_map()
        self.player = self.Map.player
        self.view = self.Map.player.viewport
        self.commands.add(Command(self, Game.is_key_cb("press", "Key.right"), MapState.right_press))
        self.commands.add(Command(self, Game.is_key_cb("press", "Key.left"), MapState.left_press))
        self.commands.add(Command(self, Game.is_key_cb("press", "Key.up"), MapState.up_press))
        self.commands.add(Command(self, Game.is_key_cb("press", "Key.down"), MapState.down_press))

    def update(self, interval):
        """
        Overwritten method
        Then calls display.print to display.
        :param interval: The time since last update.
        :type interval: float
        """
        self.Map.process_moves()
        self.view.load_to_display(self.display, interval)
        self.display.print()
        if self.Map.win_reached:
            if self.level == len(Levels.levs)-1:
                self.program.load_state(Win(self.program, self.display))
                #  win state
            else:
                self.level += 1
                self.Map = Levels.levs[self.level].get_map()
                self.player = self.Map.player
                self.view = self.Map.player.viewport
        if self.Map.lose:
            self.program.load_state(Lose(self.program, self.display))

    @staticmethod
    def right_press(state, inp):
        """
        Effect call back from Command

        Triggers a player attempt to move right, which sends the request to
        the map. Map will determine on an update whether move is possible, and move
        player if it is.

        :param state: (calling state)
        :type state: self
        :param inp: input
        :type inp: str|dict
        """
        state.player.right_pressed()
        #  state.view.load_to_display(state.display)

    @staticmethod
    def left_press(state, inp):
        """
        Effect call back from Command
        :param state: (calling state)
        :type state: self
        :param inp: input
        :type inp: str|dict
        """
        state.player.left_pressed()
        #  state.view.load_to_display(state.display)

    @staticmethod
    def up_press(state, inp):
        """
        Effect call back from Command
        :param state: (calling state)
        :type state: self
        :param inp: input
        :type inp: str|dict
        """
        state.player.up_pressed()
        #  state.view.load_to_display(state.display)

    @staticmethod
    def down_press(state, inp):
        """
        Effect call back from Command
        :param state: (calling state)
        :type state: self
        :param inp: input
        :type inp: str|dict
        """
        state.player.down_pressed()
        #  state.view.load_to_display(state.display)
