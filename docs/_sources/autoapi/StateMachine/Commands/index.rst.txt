:mod:`StateMachine.Commands`
============================

.. py:module:: StateMachine.Commands

.. autoapi-nested-parse::

   Classes for binding conditions to effects on the state of the program, using callback functions for input testing and state effect alteration. 



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   StateMachine.Commands.Command
   StateMachine.Commands.Commands



.. class:: Command(state, bool_func, effect, name='untitled')


   Binds an evaluation callback to an effect callback.

   :param state: The state using this Command
   :type state: class State
   :param bool_func: A callback which returns True if the effect should be triggered
   :type bool_func: Function
   :param effect: A callback called when command should be executed
   :type effect: Function
   :param name: Optional parameter containing human-readable command name
   :type name: str

   .. method:: check_command(self, test)

      Checks test with `self.bool_func(self.state, test)` callback. If true, calls `self.effect(self.state, test)`

      :param test: Input to test.
      :type test: str | dict



.. class:: Commands(state)


   Contains a list of Command objects

   :param state: The state containing this Commands object 
   :type state: class State

   .. method:: check_commands(self, test)

      Checks each command and returns True on the first match it has. Otherwise, returns False.

      :param test: An input to test against each command.
      :type test: str | dict


   .. method:: add(self, command)

      Adds a `Command` to `self.commands`

      :param command: A `Command` to append to `self.commands`
      :type command: class Command


   .. method:: to_string(self)

      Provides a string listing `Command` bindings and their names, separated by newlines.

      :returns: Information about available commands.
      :rtype str:



