:mod:`src.Game.GameStates`
==========================

.. py:module:: src.Game.GameStates

.. autoapi-nested-parse::

   Game State

   Holds a list of game objects. Updates them when program tells state to update
   as looping continues.

   Handles keyboard input commands as sent by GameProgram.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.Game.GameStates.Game



.. data:: Command
   

   

.. class:: Game(program, display)


   Bases: :class:`src.StateMachine.States.State`

   Parent game state.

   Updates game objects and holds commands to change features of state.

   .. method:: update(self, interval)

      Called by game thread.

      Blanks display, then calls update on each game object.
      Then calls display.print to display.
      :param interval: The time since last update.
      :type interval: float


   .. method:: end_game(state, inp)
      :staticmethod:


   .. method:: is_key_cb(key_type, key)
      :staticmethod:

      Callback for use with Command.

      Pass return function to bool_func parameter on Command creation.

      Sees if key has been pressed

      :param key_type: 'press' or 'release'
      :type key_type: str
      :param key: The key to look for
      :type key: str


   .. method:: print_key_info(state, inp)
      :staticmethod:

      Debug method for Command callbacks.

      Prints the key pressed.

      :param state: Calling state, passed by Command
      :type state: class State
      :param inp: input
      :type inp: dict


   .. method:: end_state(self)

      Overwritten method

      Calls super().end_state() and stops listening to keyboard input



