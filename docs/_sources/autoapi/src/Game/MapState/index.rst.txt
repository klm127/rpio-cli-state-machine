:mod:`src.Game.MapState`
========================

.. py:module:: src.Game.MapState

.. autoapi-nested-parse::

   Manages game logic.

   Contains self.Map, a `Map.Map` generated by `Map.Levels.Levels`

   Contains self.player, retrieved from self.Map

   Contains self.view, a `Map.Player.Viewport` retrieved from self.player

   Contains self.display, inherited from `GameStates.Game`

   Adds `Commands` for player keypresses to its `src.StateMachine.Commands.Commands` instance, binding them to effects

   When `MapState` is updated by the `GameProgram`,
    it tells self.Map to process any moves requested by objects on the map
    blanks the display,
    and loads the player's view range to the `Display` object



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.Game.MapState.MapState



.. class:: MapState(program, display)


   Bases: :class:`src.Game.GameStates.Game`

   Initializes a new MapState

   Passes player's view to display, handles key presses, tells Map to check moves

   :param program: program operating this state
   :type program: class src.Game.GameProgram.GameProgram
   :param display: display to show player's view on
   :type display: class src.Game.Display

   .. method:: update(self, interval)

      Overwritten method
      Then calls display.print to display.
      :param interval: The time since last update.
      :type interval: float


   .. method:: right_press(state, inp)
      :staticmethod:

      Effect call back from Command

      Triggers a player attempt to move right, which sends the request to
      the map. Map will determine on an update whether move is possible, and move
      player if it is.

      :param state: (calling state)
      :type state: self
      :param inp: input
      :type inp: str|dict


   .. method:: left_press(state, inp)
      :staticmethod:

      Effect call back from Command
      :param state: (calling state)
      :type state: self
      :param inp: input
      :type inp: str|dict


   .. method:: up_press(state, inp)
      :staticmethod:

      Effect call back from Command
      :param state: (calling state)
      :type state: self
      :param inp: input
      :type inp: str|dict


   .. method:: down_press(state, inp)
      :staticmethod:

      Effect call back from Command
      :param state: (calling state)
      :type state: self
      :param inp: input
      :type inp: str|dict



