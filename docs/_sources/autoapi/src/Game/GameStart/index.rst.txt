:mod:`src.Game.GameStart`
=========================

.. py:module:: src.Game.GameStart

.. autoapi-nested-parse::

   The starting state for the game.

   Shows some text and spinners to introduce the player to the game.

   When space-bar is pressed or when the text is finished scrolling, loads up the MapState to begin game.

   Extends src.Game.Map.GameStates.Game



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.Game.GameStart.GameStart



.. class:: GameStart(program, display)


   Bases: :class:`src.Game.GameStates.Game`

   .. method:: done(self, scroll_text)

      Called by the instances of TextScroll in TitleScreenObjects.

      Lets this state know that the text scrolls are done scrolling.

      GameStart looks at which text scroll is done, then creates the next one.

      :param scroll_text: The calling scroll text object
      :type scroll_text: class src.Game.Map.TitleScreenObjects.TextScroll


   .. method:: wave_generator(x, num)
      :staticmethod:

      Returns new instances of `TitleScreenObjects.spinner` to rotate some characters that give the
      vague appearance of being waves, in keeping with the pirate theme.

      :param x: The x on the display, either 1 or 2, to place them (they all start at y=1)
      :type x: int
      :param num: The interval time between frame changes
      :type num: float


   .. method:: next_state(state, inp)
      :staticmethod:

      Called by a `Command` through an `effect` callback.

      Triggered by space bar on the title screen.

      Sets self.program.state to a `MapState` instance, passing the same display this state used to `MapState`

      Neither parameter is actually used, but this is the structure of a command callback.

      :param state: The calling state (will be self)
      :type state: extends class src.StateMachine.States.State
      :param inp: The input - will be a key dict
      :type inp: dict



