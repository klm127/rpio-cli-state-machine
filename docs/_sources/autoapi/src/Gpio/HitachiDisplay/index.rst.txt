:mod:`src.Gpio.HitachiDisplay`
==============================

.. py:module:: src.Gpio.HitachiDisplay

.. autoapi-nested-parse::

   Can be passed in as printer object to a Game.Display instance

   This class enables an Hitachi HD44780U to be used to run the pirate game. (Or anything else Display is used for)

   Currently running in 4 bit. Soon to be changed to 8-bit.

   Works with I2C protocol.

   To set up, Wire SCL on a Hitachi hat to SCL on the PI. SDA to SDA. Ground to ground and power to 5v.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   src.Gpio.HitachiDisplay.HitachiPrinter



.. data:: LINE_1
   :annotation: = 128

   

.. data:: LINE_2
   :annotation: = 192

   

.. data:: BACKLIGHT
   :annotation: = 8

   

.. data:: ENABLE
   :annotation: = 4

   

.. data:: CMD_4BIT
   :annotation: = 40

   

.. data:: CMD_CLEAR
   :annotation: = 1

   

.. data:: CMD_HOME
   :annotation: = 2

   

.. data:: CMD_POSITION
   :annotation: = 128

   

.. data:: DELAY
   :annotation: = 0.0005

   

.. data:: CMD_MODE
   :annotation: = 0

   

.. data:: DATA_MODE
   :annotation: = 1

   

.. class:: HitachiPrinter(address=39, width=16)


   Wraps functions for interfacing with a Hitachi HD44780 display. Set src.Game.Map.Display.printer to an instance of this object.
   :param address: The i2C address of the display
   :type address: int
   :param width: the max characters displayed per line
   :type width: int

   .. method:: lcd_init(self)

      Initializes the LCD with some prior commands


   .. method:: custom_char(self)

      Loads three custom characters into the Hitachi CGRAM for char(0), char(1), and char(2).
      char(0) is a stick figure player object
      char(1) is a left half of a pirate face
      char(2) is the right half of a pirate face


   .. method:: lcd_toggle_enable(self, bits)

      Writes to 4 bits to i2c address

      Not called directly; called by lcd_byte.

      :param bits: 4 bits to send
      :type bits: binary


   .. method:: lcd_byte(self, bits, mode)

      Splits 8 bits into 4 bit sections.

      Sends the "high" bit to lcd_toggle_enable first, then the "low" bits.

      Sets mode to mode, 0 for a command, 1 to write data to the Hitachi register

      :param bits: 8 bits to write
      :type bits: int
      :param mode: data or command mode
      :type mode: bit


   .. method:: lcd_string(self, message, line)

      Splits a string into component characters and sends them to hitachi, writing them on the given line
      Note that only lines 1 and 2 are visible on most displays, and that's all this game program supports for now.

      Should not be called externally; use print() instead.

      :param message: A string to write on the display
      :type message: str
      :param line: The line to write to; use constant LINE_1 or LINE_2.
      :type line: int


   .. method:: print(self, rows)

      Called by Display to print the current game characters on the display.

      Prints the first array in rows to the top line and the second to the bottom line.

      :param rows: A 2D array of 16 characters each
      :type rows: array



